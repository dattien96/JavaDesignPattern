https://gpcoder.com/4520-huong-dan-java-design-pattern-bridge/

Bridge Pattern là một trong những Pattern thuộc nhóm cấu trúc (Structural Pattern). Ý tưởng của nó là tách tính trừu tượng (abstraction)
ra khỏi tính hiện thực (implementation) của nó. Từ đó có thể dễ dàng chỉnh sửa hoặc thay thế mà không làm ảnh hưởng đến những nơi có sử dụng lớp ban đầu.

Điều đó có nghĩa là, ban đầu chúng ta thiết kế một class với rất nhiều xử lý, bây giờ chúng ta không muốn để những xử lý đó trong class đó nữa.
Vì thế, chúng ta sẽ tạo ra một class khác và move các xử lý đó qua class mới.
Khi đó, trong lớp cũ sẽ giữ một đối tượng thuộc về lớp mới, và đối tượng này sẽ chịu trách nhiệm xử lý thay cho lớp ban đầu

Bridge Pattern khá giống với mẫu Adapter Pattern ở chỗ là sẽ nhờ vào một lớp khác để thực hiện một số xử lý nào đó.
Tuy nhiên, ý nghĩa và mục đích sử dụng của hai mẫu thiết kế này hoàn toàn khác nhau:

- Adapter Pattern hay còn gọi là Wrapper pattern được dùng để biến đổi một class/ interface sang một dạng khác có thể sử dụng được.
Adapter Pattern giúp các lớp không tương thích hoạt động cùng nhau mà bình thường là không thể.
- Bridge Pattern được sử dụng được sử dụng để tách thành phần trừu tượng (abstraction) và thành phần thực thi (implementation) riêng biệt.
- Adapter Pattern làm cho mọi thứ có thể hoạt động với nhau sau khi chúng đã được thiết kế (đã tồn tại).
Bridge Pattern nên được thiết kế trước khi phát triển hệ thống để Abstraction và Implementation có thể thực hiện một cách độc lập.

------------------------------------------
bridge_before:
Với dạng impl như này, nếu thêm 1 color, thì sẽ phải tạo thêm 2 class mới tương ứng với 2 shape.
Tương tự nếu đã có 5 shape rồi. Mà muốn thêm 2 color nữa thì cần thêm 10 class.

bridge_after :
Với pattern này, sẽ tách biệt hẳn phần thực thi color ra khỏi shape. Và dùng kĩ thuật quan hệ has-a: tức là shape has 1 obj là color.

shape chỉ chứa 1 obj là Color- interface. Do đó, sau này nếu thêm color thì chỉ cần thêm SubClass. Shape vẫn k cần thay
đổi vì đang ref interface.